// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.

package gorm_gen_repo

import (
	"context"

	"github.com/fzf-labs/fdatabase/orm/condition"
	"github.com/fzf-labs/fdatabase/orm/dbcache"
	"github.com/fzf-labs/fdatabase/orm/encoding"
	"github.com/fzf-labs/fdatabase/orm/gen/config"
	"github.com/fzf-labs/fdatabase/orm/gen/example/postgres/gorm_gen_dao"
	"github.com/fzf-labs/fdatabase/orm/gen/example/postgres/gorm_gen_model"
	"gorm.io/gorm"
)

var _ IAdminToRoleDemoRepo = (*AdminToRoleDemoRepo)(nil)

var (
	CacheAdminToRoleDemoAll = "DBCache:gorm_gen:AdminToRoleDemoAll"
)

type (
	IAdminToRoleDemoRepo interface {
		// FindAll 查询所有数据
		FindAll(ctx context.Context) ([]*gorm_gen_model.AdminToRoleDemo, error)
		// FindAllCache 查询所有数据并设置缓存
		FindAllCache(ctx context.Context) ([]*gorm_gen_model.AdminToRoleDemo, error)
		// FindMultiByCondition 根据自定义条件查询数据
		FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.AdminToRoleDemo, *condition.Reply, error)
	}
	AdminToRoleDemoRepo struct {
		db       *gorm.DB
		cache    dbcache.IDBCache
		encoding encoding.API
	}
)

func NewAdminToRoleDemoRepo(cfg *config.Repo) *AdminToRoleDemoRepo {
	return &AdminToRoleDemoRepo{
		db:       cfg.DB,
		cache:    cfg.Cache,
		encoding: cfg.Encoding,
	}
}

// FindAll 查询所有数据
func (a *AdminToRoleDemoRepo) FindAll(ctx context.Context) ([]*gorm_gen_model.AdminToRoleDemo, error) {
	dao := gorm_gen_dao.Use(a.db).AdminToRoleDemo
	result, err := dao.WithContext(ctx).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindAllCache 查询所有数据并设置缓存
func (a *AdminToRoleDemoRepo) FindAllCache(ctx context.Context) ([]*gorm_gen_model.AdminToRoleDemo, error) {
	resp := make([]*gorm_gen_model.AdminToRoleDemo, 0)
	cacheKey := a.cache.Key(CacheAdminToRoleDemoAll)
	cacheValue, err := a.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(a.db).AdminToRoleDemo
		result, err := dao.WithContext(ctx).Find()
		if err != nil {
			return "", err
		}
		marshal, err := a.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	})
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = a.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindMultiByCondition 自定义查询数据(通用)
func (a *AdminToRoleDemoRepo) FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.AdminToRoleDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.AdminToRoleDemo, 0)
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.AdminToRoleDemo{})
	if err != nil {
		return result, nil, err
	}
	err = a.db.WithContext(ctx).Model(&gorm_gen_model.AdminToRoleDemo{}).Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, nil, err
	}
	if total == 0 {
		return result, nil, nil
	}
	conditionReply, err := conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, nil, err
	}
	query := a.db.WithContext(ctx).Model(&gorm_gen_model.AdminToRoleDemo{}).Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, nil, err
	}
	return result, conditionReply, err
}
