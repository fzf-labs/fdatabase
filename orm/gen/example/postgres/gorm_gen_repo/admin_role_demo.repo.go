// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.
// Code generated by gen/repo. DO NOT EDIT.

package gorm_gen_repo

import (
	"context"
	"errors"

	"gitlab.yc345.tv/backend/utils/v2/orm"
	"gitlab.yc345.tv/backend/utils/v2/orm/gen/cache"
	"gitlab.yc345.tv/backend/utils/v2/orm/gen/condition"
	"gitlab.yc345.tv/backend/utils/v2/orm/gen/config"
	"gitlab.yc345.tv/backend/utils/v2/orm/gen/custom"
	"gitlab.yc345.tv/backend/utils/v2/orm/gen/encoding"
	"gitlab.yc345.tv/backend/utils/v2/orm/gen/example/postgres/gorm_gen_dao"
	"gitlab.yc345.tv/backend/utils/v2/orm/gen/example/postgres/gorm_gen_model"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
)

var _ IAdminRoleDemoRepo = (*AdminRoleDemoRepo)(nil)

var (
	CacheAdminRoleDemoAll        = "DBCache:gorm_gen:AdminRoleDemoAll"
	CacheAdminRoleDemoByIDPrefix = "DBCache:gorm_gen:AdminRoleDemoByID"
)

type (
	IAdminRoleDemoRepo interface {
		// CreateOne 创建一条数据
		CreateOne(ctx context.Context, data *gorm_gen_model.AdminRoleDemo) error
		// CreateOneByTx 创建一条数据(事务)
		CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo) error
		// CreateBatch 批量创建数据
		CreateBatch(ctx context.Context, data []*gorm_gen_model.AdminRoleDemo, batchSize int) error
		// CreateBatchByTx 批量创建数据(事务)
		CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.AdminRoleDemo, batchSize int) error
		// UpsertOne Upsert一条数据
		UpsertOne(ctx context.Context, data *gorm_gen_model.AdminRoleDemo) error
		// UpsertOneByTx Upsert一条数据(事务)
		UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo) error
		// UpsertOneByFields Upsert一条数据，根据fields字段
		UpsertOneByFields(ctx context.Context, data *gorm_gen_model.AdminRoleDemo, fields []string) error
		// UpsertOneByFieldsTx Upsert一条数据，根据fields字段(事务)
		UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo, fields []string) error
		// UpdateOne 更新一条数据
		UpdateOne(ctx context.Context, data *gorm_gen_model.AdminRoleDemo) error
		// UpdateOneByTx 更新一条数据(事务)
		UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo) error
		// UpdateOneWithZero 更新一条数据,包含零值
		UpdateOneWithZero(ctx context.Context, data *gorm_gen_model.AdminRoleDemo) error
		// UpdateOneWithZeroByTx 更新一条数据,包含零值(事务)
		UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo) error
		// FindOneCacheByID 根据ID查询一条数据并设置缓存
		FindOneCacheByID(ctx context.Context, ID string) (*gorm_gen_model.AdminRoleDemo, error)
		// FindOneByID 根据ID查询一条数据
		FindOneByID(ctx context.Context, ID string) (*gorm_gen_model.AdminRoleDemo, error)
		// FindMultiCacheByIDS 根据IDS查询多条数据并设置缓存
		FindMultiCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.AdminRoleDemo, error)
		// FindMultiByIDS 根据IDS查询多条数据
		FindMultiByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.AdminRoleDemo, error)
		// FindMultiByPid 根据pid查询多条数据
		FindMultiByPid(ctx context.Context, pid string) ([]*gorm_gen_model.AdminRoleDemo, error)
		// FindMultiByPids 根据pids查询多条数据
		FindMultiByPids(ctx context.Context, pids []string) ([]*gorm_gen_model.AdminRoleDemo, error)
		// FindAll 查询所有数据
		FindAll(ctx context.Context) ([]*gorm_gen_model.AdminRoleDemo, error)
		// FindAllCache 查询所有数据并设置缓存
		FindAllCache(ctx context.Context) ([]*gorm_gen_model.AdminRoleDemo, error)
		// Deprecated
		// 请使用FindMultiByCondition替代
		FindMultiByPaginator(ctx context.Context, paginatorReq *orm.PaginatorReq) ([]*gorm_gen_model.AdminRoleDemo, *orm.PaginatorReply, error)
		// Deprecated
		// 请使用FindMultiByCondition替代
		FindMultiByCustom(ctx context.Context, customReq *custom.Req) ([]*gorm_gen_model.AdminRoleDemo, *custom.Reply, error)
		// FindMultiByCondition 根据自定义条件查询数据
		FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.AdminRoleDemo, *condition.Reply, error)
		// DeleteOneCacheByID 根据ID删除一条数据并清理缓存
		DeleteOneCacheByID(ctx context.Context, ID string) error
		// DeleteOneCacheByIDTx 根据ID删除一条数据并清理缓存(事务)
		DeleteOneCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteOneByID 根据ID删除一条数据
		DeleteOneByID(ctx context.Context, ID string) error
		// DeleteOneByIDTx 根据ID删除一条数据(事务)
		DeleteOneByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error
		// DeleteMultiCacheByIDS 根据IDS删除多条数据并清理缓存
		DeleteMultiCacheByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiCacheByIDSTx 根据IDS删除多条数据并清理缓存(事务)
		DeleteMultiCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiByIDS 根据IDS删除多条数据
		DeleteMultiByIDS(ctx context.Context, IDS []string) error
		// DeleteMultiByIDSTx 根据IDS删除多条数据(事务)
		DeleteMultiByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error
		// DeleteMultiCacheByPid 根据pid删除多条数据并清理缓存
		DeleteMultiCacheByPid(ctx context.Context, pid string) error
		// DeleteMultiCacheByPidTx 根据pid删除多条数据并清理缓存(事务)
		DeleteMultiCacheByPidTx(ctx context.Context, tx *gorm_gen_dao.Query, pid string) error
		// DeleteMultiByPid 根据pid删除多条数据
		DeleteMultiByPid(ctx context.Context, pid string) error
		// DeleteMultiByPidTx 根据pid删除多条数据(事务)
		DeleteMultiByPidTx(ctx context.Context, tx *gorm_gen_dao.Query, pid string) error
		// DeleteAllCache 删除所有数据缓存
		DeleteAllCache(ctx context.Context) error
		// DeleteUniqueIndexCache 删除唯一索引存在的缓存
		DeleteUniqueIndexCache(ctx context.Context, data []*gorm_gen_model.AdminRoleDemo) error
	}
	AdminRoleDemoRepo struct {
		db       *gorm.DB
		cache    cache.IDBCache
		encoding encoding.API
	}
)

func NewAdminRoleDemoRepo(cfg *config.Repo) *AdminRoleDemoRepo {
	return &AdminRoleDemoRepo{
		db:       cfg.DB,
		cache:    cfg.Cache,
		encoding: cfg.Encoding,
	}
}

// CreateOne 创建一条数据
func (a *AdminRoleDemoRepo) CreateOne(ctx context.Context, data *gorm_gen_model.AdminRoleDemo) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateOneByTx 创建一条数据(事务)
func (a *AdminRoleDemoRepo) CreateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo) error {
	dao := tx.AdminRoleDemo
	err := dao.WithContext(ctx).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatch 批量创建数据
func (a *AdminRoleDemoRepo) CreateBatch(ctx context.Context, data []*gorm_gen_model.AdminRoleDemo, batchSize int) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// CreateBatchByTx 批量创建数据(事务)
func (a *AdminRoleDemoRepo) CreateBatchByTx(ctx context.Context, tx *gorm_gen_dao.Query, data []*gorm_gen_model.AdminRoleDemo, batchSize int) error {
	dao := tx.AdminRoleDemo
	err := dao.WithContext(ctx).CreateInBatches(data, batchSize)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOne Upsert一条数据
func (a *AdminRoleDemoRepo) UpsertOne(ctx context.Context, data *gorm_gen_model.AdminRoleDemo) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByTx Upsert一条数据(事务)
func (a *AdminRoleDemoRepo) UpsertOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo) error {
	dao := tx.AdminRoleDemo
	err := dao.WithContext(ctx).Save(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFields Upsert一条数据，根据fields字段
func (a *AdminRoleDemoRepo) UpsertOneByFields(ctx context.Context, data *gorm_gen_model.AdminRoleDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFields fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpsertOneByFieldsTx Upsert一条数据，根据fields字段(事务)
func (a *AdminRoleDemoRepo) UpsertOneByFieldsTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo, fields []string) error {
	if len(fields) == 0 {
		return errors.New("UpsertOneByFieldsTx fields is empty")
	}
	columns := make([]clause.Column, 0)
	for _, v := range fields {
		columns = append(columns, clause.Column{Name: v})
	}
	dao := tx.AdminRoleDemo
	err := dao.WithContext(ctx).Clauses(clause.OnConflict{
		Columns:   columns,
		UpdateAll: true,
	}).Create(data)
	if err != nil {
		return err
	}
	return nil
}

// UpdateOne 更新一条数据
func (a *AdminRoleDemoRepo) UpdateOne(ctx context.Context, data *gorm_gen_model.AdminRoleDemo) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Updates(data)
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, []*gorm_gen_model.AdminRoleDemo{data})
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneByTx 更新一条数据(事务)
func (a *AdminRoleDemoRepo) UpdateOneByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo) error {
	dao := tx.AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Updates(data)
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, []*gorm_gen_model.AdminRoleDemo{data})
	if err != nil {
		return err
	}
	return err
}

// UpdateOneWithZero 更新一条数据,包含零值
func (a *AdminRoleDemoRepo) UpdateOneWithZero(ctx context.Context, data *gorm_gen_model.AdminRoleDemo) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Select(dao.ALL.WithTable("")).Updates(data)
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, []*gorm_gen_model.AdminRoleDemo{data})
	if err != nil {
		return err
	}
	return nil
}

// UpdateOneWithZeroByTx 更新一条数据(事务),包含零值
func (a *AdminRoleDemoRepo) UpdateOneWithZeroByTx(ctx context.Context, tx *gorm_gen_dao.Query, data *gorm_gen_model.AdminRoleDemo) error {
	dao := tx.AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(data.ID)).Select(dao.ALL.WithTable("")).Updates(data)
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, []*gorm_gen_model.AdminRoleDemo{data})
	if err != nil {
		return err
	}
	return err
}

// DeleteOneCacheByID 根据ID删除一条数据并清理缓存
func (a *AdminRoleDemoRepo) DeleteOneCacheByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, []*gorm_gen_model.AdminRoleDemo{result})
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneCacheByIDTx 根据ID删除一条数据并清理缓存
func (a *AdminRoleDemoRepo) DeleteOneCacheByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return err
	}
	if result == nil {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, []*gorm_gen_model.AdminRoleDemo{result})
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByID 根据ID删除一条数据
func (a *AdminRoleDemoRepo) DeleteOneByID(ctx context.Context, ID string) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteOneByID 根据ID删除一条数据
func (a *AdminRoleDemoRepo) DeleteOneByIDTx(ctx context.Context, tx *gorm_gen_dao.Query, ID string) error {
	dao := tx.AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDS 根据IDS删除多条数据并清理缓存
func (a *AdminRoleDemoRepo) DeleteMultiCacheByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByIDSTx 根据IDS删除多条数据并清理缓存
func (a *AdminRoleDemoRepo) DeleteMultiCacheByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByIDS 根据IDS删除多条数据
func (a *AdminRoleDemoRepo) DeleteMultiByIDS(ctx context.Context, IDS []string) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByIDSTx 根据IDS删除多条数据
func (a *AdminRoleDemoRepo) DeleteMultiByIDSTx(ctx context.Context, tx *gorm_gen_dao.Query, IDS []string) error {
	dao := tx.AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByPid 根据pid删除多条数据并清理缓存
func (a *AdminRoleDemoRepo) DeleteMultiCacheByPid(ctx context.Context, pid string) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.Pid.Eq(pid)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Pid.Eq(pid)).Delete()
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiCacheByPidTx 根据pid删除多条数据并清理缓存
func (a *AdminRoleDemoRepo) DeleteMultiCacheByPidTx(ctx context.Context, tx *gorm_gen_dao.Query, pid string) error {
	dao := tx.AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.Pid.Eq(pid)).Find()
	if err != nil {
		return err
	}
	if len(result) == 0 {
		return nil
	}
	_, err = dao.WithContext(ctx).Where(dao.Pid.Eq(pid)).Delete()
	if err != nil {
		return err
	}
	err = a.DeleteUniqueIndexCache(ctx, result)
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByPid 根据pid删除多条数据
func (a *AdminRoleDemoRepo) DeleteMultiByPid(ctx context.Context, pid string) error {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.Pid.Eq(pid)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteMultiByPidTx 根据pid删除多条数据
func (a *AdminRoleDemoRepo) DeleteMultiByPidTx(ctx context.Context, tx *gorm_gen_dao.Query, pid string) error {
	dao := tx.AdminRoleDemo
	_, err := dao.WithContext(ctx).Where(dao.Pid.Eq(pid)).Delete()
	if err != nil {
		return err
	}
	return nil
}

// DeleteAllCache 删除所有数据缓存
func (a *AdminRoleDemoRepo) DeleteAllCache(ctx context.Context) error {
	cacheKey := a.cache.Key(CacheAdminRoleDemoAll)
	err := a.cache.Del(ctx, cacheKey)
	if err != nil {
		return err
	}
	return nil
}

// DeleteUniqueIndexCache 删除唯一索引存在的缓存
func (a *AdminRoleDemoRepo) DeleteUniqueIndexCache(ctx context.Context, data []*gorm_gen_model.AdminRoleDemo) error {
	keys := make([]string, 0)
	for _, v := range data {
		keys = append(keys, a.cache.Key(CacheAdminRoleDemoByIDPrefix, v.ID))

	}
	err := a.cache.DelBatch(ctx, keys)
	if err != nil {
		return err
	}
	return nil
}

// FindOneCacheByID 根据ID查询一条数据并设置缓存
func (a *AdminRoleDemoRepo) FindOneCacheByID(ctx context.Context, ID string) (*gorm_gen_model.AdminRoleDemo, error) {
	resp := new(gorm_gen_model.AdminRoleDemo)
	cacheKey := a.cache.Key(CacheAdminRoleDemoByIDPrefix, ID)
	cacheValue, err := a.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
		result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
		if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
			return "", err
		}
		marshal, err := a.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	})
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = a.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// FindOneByID 根据ID查询一条数据
func (a *AdminRoleDemoRepo) FindOneByID(ctx context.Context, ID string) (*gorm_gen_model.AdminRoleDemo, error) {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.Eq(ID)).First()
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return nil, err
	}
	return result, nil
}

// FindMultiCacheByIDS 根据IDS查询多条数据并设置缓存
func (a *AdminRoleDemoRepo) FindMultiCacheByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.AdminRoleDemo, error) {
	resp := make([]*gorm_gen_model.AdminRoleDemo, 0)
	cacheKeys := make([]string, 0)
	keyToParam := make(map[string]string)
	for _, v := range IDS {
		cacheKey := a.cache.Key(CacheAdminRoleDemoByIDPrefix, v)
		cacheKeys = append(cacheKeys, cacheKey)
		keyToParam[cacheKey] = v
	}
	cacheValue, err := a.cache.FetchBatch(ctx, cacheKeys, func(miss []string) (map[string]string, error) {
		parameters := make([]string, 0)
		for _, v := range miss {
			parameters = append(parameters, keyToParam[v])
		}
		dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
		result, err := dao.WithContext(ctx).Where(dao.ID.In(parameters...)).Find()
		if err != nil {
			return nil, err
		}
		value := make(map[string]string)
		for _, v := range miss {
			value[v] = ""
		}
		for _, v := range result {
			marshal, err := a.encoding.Marshal(v)
			if err != nil {
				return nil, err
			}
			value[a.cache.Key(CacheAdminRoleDemoByIDPrefix, v.ID)] = string(marshal)
		}
		return value, nil
	})
	if err != nil {
		return nil, err
	}
	for _, v := range IDS {
		cacheKey := a.cache.Key(CacheAdminRoleDemoByIDPrefix, v)
		if cacheValue[cacheKey] != "" {
			tmp := new(gorm_gen_model.AdminRoleDemo)
			err := a.encoding.Unmarshal([]byte(cacheValue[cacheKey]), tmp)
			if err != nil {
				return nil, err
			}
			resp = append(resp, tmp)
		}
	}
	return resp, nil
}

// FindMultiByIDS 根据IDS查询多条数据
func (a *AdminRoleDemoRepo) FindMultiByIDS(ctx context.Context, IDS []string) ([]*gorm_gen_model.AdminRoleDemo, error) {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.ID.In(IDS...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiByPid 根据pid查询多条数据
func (a *AdminRoleDemoRepo) FindMultiByPid(ctx context.Context, pid string) ([]*gorm_gen_model.AdminRoleDemo, error) {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.Pid.Eq(pid)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindMultiByPids 根据pids查询多条数据
func (a *AdminRoleDemoRepo) FindMultiByPids(ctx context.Context, pids []string) ([]*gorm_gen_model.AdminRoleDemo, error) {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	result, err := dao.WithContext(ctx).Where(dao.Pid.In(pids...)).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindAll 查询所有数据
func (a *AdminRoleDemoRepo) FindAll(ctx context.Context) ([]*gorm_gen_model.AdminRoleDemo, error) {
	dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
	result, err := dao.WithContext(ctx).Find()
	if err != nil {
		return nil, err
	}
	return result, nil
}

// FindAllCache 查询所有数据并设置缓存
func (a *AdminRoleDemoRepo) FindAllCache(ctx context.Context) ([]*gorm_gen_model.AdminRoleDemo, error) {
	resp := make([]*gorm_gen_model.AdminRoleDemo, 0)
	cacheKey := a.cache.Key(CacheAdminRoleDemoAll)
	cacheValue, err := a.cache.Fetch(ctx, cacheKey, func() (string, error) {
		dao := gorm_gen_dao.Use(a.db).AdminRoleDemo
		result, err := dao.WithContext(ctx).Find()
		if err != nil {
			return "", err
		}
		marshal, err := a.encoding.Marshal(result)
		if err != nil {
			return "", err
		}
		return string(marshal), nil
	})
	if err != nil {
		return nil, err
	}
	if cacheValue != "" {
		err = a.encoding.Unmarshal([]byte(cacheValue), resp)
		if err != nil {
			return nil, err
		}
	}
	return resp, nil
}

// Deprecated
// 请使用FindMultiByCondition替代
func (a *AdminRoleDemoRepo) FindMultiByPaginator(ctx context.Context, paginatorReq *orm.PaginatorReq) ([]*gorm_gen_model.AdminRoleDemo, *orm.PaginatorReply, error) {
	result := make([]*gorm_gen_model.AdminRoleDemo, 0)
	var total int64
	whereExpressions, orderExpressions, err := paginatorReq.ConvertToGormExpression(gorm_gen_model.AdminRoleDemo{})
	if err != nil {
		return result, nil, err
	}
	err = a.db.WithContext(ctx).Model(&gorm_gen_model.AdminRoleDemo{}).Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, nil, err
	}
	if total == 0 {
		return result, nil, nil
	}
	paginatorReply := paginatorReq.ConvertToPage(int(total))
	err = a.db.WithContext(ctx).Model(&gorm_gen_model.AdminRoleDemo{}).Limit(paginatorReply.Limit).Offset(paginatorReply.Offset).Clauses(whereExpressions...).Clauses(orderExpressions...).Find(&result).Error
	if err != nil {
		return result, nil, err
	}
	return result, paginatorReply, err
}

// Deprecated
// 请使用FindMultiByCondition替代
func (a *AdminRoleDemoRepo) FindMultiByCustom(ctx context.Context, customReq *custom.Req) ([]*gorm_gen_model.AdminRoleDemo, *custom.Reply, error) {
	result := make([]*gorm_gen_model.AdminRoleDemo, 0)
	var total int64
	whereExpressions, orderExpressions, err := customReq.ConvertToGormExpression(gorm_gen_model.AdminRoleDemo{})
	if err != nil {
		return result, nil, err
	}
	err = a.db.WithContext(ctx).Model(&gorm_gen_model.AdminRoleDemo{}).Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, nil, err
	}
	if total == 0 {
		return result, nil, nil
	}
	customReply, err := customReq.ConvertToPage(int(total))
	if err != nil {
		return result, nil, err
	}
	query := a.db.WithContext(ctx).Model(&gorm_gen_model.AdminRoleDemo{}).Clauses(whereExpressions...).Clauses(orderExpressions...)
	if customReply.Offset != 0 {
		query = query.Offset(customReply.Offset)
	}
	if customReply.Limit != 0 {
		query = query.Limit(customReply.Limit)
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, nil, err
	}
	return result, customReply, err
}

// FindMultiByCondition 自定义查询数据(通用)
func (a *AdminRoleDemoRepo) FindMultiByCondition(ctx context.Context, conditionReq *condition.Req) ([]*gorm_gen_model.AdminRoleDemo, *condition.Reply, error) {
	result := make([]*gorm_gen_model.AdminRoleDemo, 0)
	var total int64
	whereExpressions, orderExpressions, err := conditionReq.ConvertToGormExpression(gorm_gen_model.AdminRoleDemo{})
	if err != nil {
		return result, nil, err
	}
	err = a.db.WithContext(ctx).Model(&gorm_gen_model.AdminRoleDemo{}).Select([]string{"*"}).Clauses(whereExpressions...).Count(&total).Error
	if err != nil {
		return result, nil, err
	}
	if total == 0 {
		return result, nil, nil
	}
	conditionReply, err := conditionReq.ConvertToPage(int32(total))
	if err != nil {
		return result, nil, err
	}
	query := a.db.WithContext(ctx).Model(&gorm_gen_model.AdminRoleDemo{}).Clauses(whereExpressions...).Clauses(orderExpressions...)
	if conditionReply.Page != 0 && conditionReply.PageSize != 0 {
		query = query.Offset(int((conditionReply.Page - 1) * conditionReply.PageSize))
		query = query.Limit(int(conditionReply.PageSize))
	}
	err = query.Find(&result).Error
	if err != nil {
		return result, nil, err
	}
	return result, conditionReply, err
}
